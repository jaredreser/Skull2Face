"""
Toy model for skull-to-face mapping
-----------------------------------
This demo shows how random "skull features" can be mapped to MNIST digits
(used here as stand-ins for "faces").

The pipeline is:
    Skull Features → Encoder → Latent Code → Generator → Face Image

Author: Jared Reser (ObservedImpulse.com)
Repo: skull2face
"""

import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms
import matplotlib.pyplot as plt
import os

# --------------------------
# Model Components
# --------------------------

class SkullEncoder(nn.Module):
    """Encodes skull-like input features into a latent vector."""
    def __init__(self, input_dim=20, latent_dim=64):
        super().__init__()
        self.net = nn.Sequential(
            nn.Linear(input_dim, 128),
            nn.ReLU(),
            nn.Linear(128, latent_dim)
        )

    def forward(self, x):
        return self.net(x)


class FaceGenerator(nn.Module):
    """Generates an MNIST-style image from a latent vector."""
    def __init__(self, latent_dim=64):
        super().__init__()
        self.net = nn.Sequential(
            nn.Linear(latent_dim, 128),
            nn.ReLU(),
            nn.Linear(128, 784),   # 28x28
            nn.Sigmoid()
        )

    def forward(self, z):
        return self.net(z).view(-1, 1, 28, 28)


class SkullToFace(nn.Module):
    """Full toy model: skull features → latent → face image."""
    def __init__(self):
        super().__init__()
        self.encoder = SkullEncoder()
        self.generator = FaceGenerator()

    def forward(self, skull_feats):
        z = self.encoder(skull_feats)
        return self.generator(z)

# --------------------------
# Training Loop
# --------------------------

def train(num_epochs=3, save_model=True):
    """Train the toy model on MNIST with fake skull features."""

    # Load MNIST dataset
    transform = transforms.ToTensor()
    mnist = datasets.MNIST(root='./data', train=True, download=True, transform=transform)
    loader = torch.utils.data.DataLoader(mnist, batch_size=64, shuffle=True)

    # Init model, loss, optimizer
    model = SkullToFace()
    criterion = nn.MSELoss()
    optimizer = optim.Adam(model.parameters(), lr=1e-3)

    # Training loop
    for epoch in range(num_epochs):
        for i, (images, _) in enumerate(loader):
            skull_feats = torch.randn(images.size(0), 20)  # fake skull input
            preds = model(skull_feats)
            loss = criterion(preds, images)

            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

            if i % 200 == 0:
                print(f"Epoch {epoch+1}/{num_epochs}, Step {i}, Loss {loss.item():.4f}")

    if save_model:
        torch.save(model.state_dict(), "toy_model.pth")
        print("✅ Training complete, model saved as toy_model.pth")

    return model

# --------------------------
# Visualization
# --------------------------

def visualize(model, n=6):
    """Visualize some toy skull→face outputs."""
    model.eval()
    skull_feats = torch.randn(n, 20)
    with torch.no_grad():
        preds = model(skull_feats)

    preds = preds.squeeze().numpy()
    fig, axes = plt.subplots(1, n, figsize=(n*2, 2))
    for i in range(n):
        axes[i].imshow(preds[i], cmap="gray")
        axes[i].axis("off")
    plt.show()


# --------------------------
# Main
# --------------------------

if __name__ == "__main__":
    os.makedirs("data", exist_ok=True)
    model = train(num_epochs=3)
    visualize(model, n=6)
